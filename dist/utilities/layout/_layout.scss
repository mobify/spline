// Layout utils
// ===

// Floats
// ---
//
// Writing-direction independent floats.

@mixin float-start($important: false) {
    @if($important) {
        float: left !important;
    } @else {
        float: left;
    }
}

@mixin float-end($important: false) {
    @if($important) {
        float: right !important;
    } @else {
        float: right;
    }
}


// Contain floats
// ---
//
// Contain all floated children and their margins.
//
// 1. Avoid an Opera bug when the contenteditable attribute is included anywhere
//    else in the document.
// 2. Contain the the first child’s top margin. Ensures rendering is consistent
//    with the other common clearfix method, `overflow: hidden`.

@mixin clearfix($important: false) {
    @if($important) {
        &::before,
        &::after {
            content: ' ' !important; // 1

            display: table !important; // 2
        }

        &::after {
            clear: both !important;
        }
    } @else {
        &::before,
        &::after {
            content: ' '; // 1

            display: table; // 2
        }

        &::after {
            clear: both;
        }
    }
}


// Positioning Relative
// ---

@mixin position-relative($important: false) {
    @if($important) {
        position: relative !important;
    } @else {
        position: relative;
    }
}


// Positioning Relative
// ---

@mixin position-absolute($important: false) {
    @if($important) {
        position: absolute !important;
    } @else {
        position: absolute;
    }
}


// Positioning Fixed
// ---

@mixin position-fixed($important: false) {
    @if($important) {
        position: fixed !important;
    } @else {
        position: fixed;
    }
}


// Positioning coordinate
// ---

@mixin position-top($important: false) {
    @if($important) {
        top: 0 !important;
    } @else {
        top: 0;
    }
}

@mixin position-right($important: false) {
    @if($important) {
        right: 0 !important;
    } @else {
        right: 0;
    }
}

@mixin position-bottom($important: false) {
    @if($important) {
        bottom: 0 !important;
    } @else {
        bottom: 0;
    }
}

@mixin position-left($important: false) {
    @if($important) {
        left: 0 !important;
    } @else {
        left: 0;
    }
}

@mixin position-full($important: false) {
    @if($important) {
        top: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        left: 0 !important;
    } @else {
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
    }
}


// Bleed
// ---

@mixin base-bleed($important: false, $unit: if(variable-exists(unit), $unit, null), $direction: 'top') {
    @if($important) {
        @if $direction == 'top' {
            margin-top: -$unit !important;
        }

        @if $direction == 'end' {
            margin-right: -$unit !important;
        }

        @if $direction == 'bottom' {
            margin-bottom: -$unit !important;
        }

        @if $direction == 'start' {
            margin-left: -$unit !important;
        }
    } @else {
        @if $direction == 'top' {
            margin-top: -$unit;
        }

        @if $direction == 'end' {
            margin-right: -$unit;
        }

        @if $direction == 'bottom' {
            margin-bottom: -$unit;
        }

        @if $direction == 'start' {
            margin-left: -$unit;
        }
    }
}


// Block Formatting Context
// ---
//
// Create a new Block Formatting Context. BFCs won’t overlap adjacent floats and
// will contain floated children and their margins.
//
// N.B. Will clip overflow.
//
// Attribution:
//
// - https://github.com/suitcss/utils-layout

@mixin block-context($important: false) {
    @if($important) {
        overflow: hidden !important;
    } @else {
        overflow: hidden;
    }
}
